/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _SimpleMessage {
    int32_t luckyNumber;
} SimpleMessage;

typedef struct _Heartbeat {
    float percentIdle;
} Heartbeat;

typedef struct _Measurements {
    pb_callback_t samples;
} Measurements;

typedef struct _LogMessage {
    pb_callback_t message;
} LogMessage;

typedef struct _Config_SensorParameters {
    double nominalBias;
    double nominalScaleFactor;
    double biasPerDegC;
    double scaleFactorPerDegC;
    char sensorId[10];
} Config_SensorParameters;

typedef struct _Config {
    bool has_sensor0Params;
    Config_SensorParameters sensor0Params;
    bool has_sensor1Params;
    Config_SensorParameters sensor1Params;
    bool has_sensor2Params;
    Config_SensorParameters sensor2Params;
    bool has_sensor3Params;
    Config_SensorParameters sensor3Params;
} Config;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SimpleMessage_init_default               {0}
#define Heartbeat_init_default                   {0}
#define Measurements_init_default                {{{NULL}, NULL}}
#define LogMessage_init_default                  {{{NULL}, NULL}}
#define Config_init_default                      {false, Config_SensorParameters_init_default, false, Config_SensorParameters_init_default, false, Config_SensorParameters_init_default, false, Config_SensorParameters_init_default}
#define Config_SensorParameters_init_default     {0, 0, 0, 0, ""}
#define SimpleMessage_init_zero                  {0}
#define Heartbeat_init_zero                      {0}
#define Measurements_init_zero                   {{{NULL}, NULL}}
#define LogMessage_init_zero                     {{{NULL}, NULL}}
#define Config_init_zero                         {false, Config_SensorParameters_init_zero, false, Config_SensorParameters_init_zero, false, Config_SensorParameters_init_zero, false, Config_SensorParameters_init_zero}
#define Config_SensorParameters_init_zero        {0, 0, 0, 0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define SimpleMessage_luckyNumber_tag            1
#define Heartbeat_percentIdle_tag                1
#define Measurements_samples_tag                 1
#define LogMessage_message_tag                   1
#define Config_SensorParameters_nominalBias_tag  1
#define Config_SensorParameters_nominalScaleFactor_tag 2
#define Config_SensorParameters_biasPerDegC_tag  3
#define Config_SensorParameters_scaleFactorPerDegC_tag 4
#define Config_SensorParameters_sensorId_tag     5
#define Config_sensor0Params_tag                 1
#define Config_sensor1Params_tag                 2
#define Config_sensor2Params_tag                 3
#define Config_sensor3Params_tag                 4

/* Struct field encoding specification for nanopb */
#define SimpleMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    luckyNumber,       1)
#define SimpleMessage_CALLBACK NULL
#define SimpleMessage_DEFAULT NULL

#define Heartbeat_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    percentIdle,       1)
#define Heartbeat_CALLBACK NULL
#define Heartbeat_DEFAULT NULL

#define Measurements_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    samples,           1)
#define Measurements_CALLBACK pb_default_field_callback
#define Measurements_DEFAULT NULL

#define LogMessage_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   message,           1)
#define LogMessage_CALLBACK pb_default_field_callback
#define LogMessage_DEFAULT NULL

#define Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sensor0Params,     1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sensor1Params,     2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sensor2Params,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sensor3Params,     4)
#define Config_CALLBACK NULL
#define Config_DEFAULT NULL
#define Config_sensor0Params_MSGTYPE Config_SensorParameters
#define Config_sensor1Params_MSGTYPE Config_SensorParameters
#define Config_sensor2Params_MSGTYPE Config_SensorParameters
#define Config_sensor3Params_MSGTYPE Config_SensorParameters

#define Config_SensorParameters_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   nominalBias,       1) \
X(a, STATIC,   SINGULAR, DOUBLE,   nominalScaleFactor,   2) \
X(a, STATIC,   SINGULAR, DOUBLE,   biasPerDegC,       3) \
X(a, STATIC,   SINGULAR, DOUBLE,   scaleFactorPerDegC,   4) \
X(a, STATIC,   SINGULAR, STRING,   sensorId,          5)
#define Config_SensorParameters_CALLBACK NULL
#define Config_SensorParameters_DEFAULT NULL

extern const pb_msgdesc_t SimpleMessage_msg;
extern const pb_msgdesc_t Heartbeat_msg;
extern const pb_msgdesc_t Measurements_msg;
extern const pb_msgdesc_t LogMessage_msg;
extern const pb_msgdesc_t Config_msg;
extern const pb_msgdesc_t Config_SensorParameters_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SimpleMessage_fields &SimpleMessage_msg
#define Heartbeat_fields &Heartbeat_msg
#define Measurements_fields &Measurements_msg
#define LogMessage_fields &LogMessage_msg
#define Config_fields &Config_msg
#define Config_SensorParameters_fields &Config_SensorParameters_msg

/* Maximum encoded size of messages (where known) */
/* Measurements_size depends on runtime parameters */
/* LogMessage_size depends on runtime parameters */
#define Config_SensorParameters_size             47
#define Config_size                              196
#define Heartbeat_size                           5
#define SimpleMessage_size                       11

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<SimpleMessage> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &SimpleMessage_msg;
    }
};
template <>
struct MessageDescriptor<Heartbeat> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &Heartbeat_msg;
    }
};
template <>
struct MessageDescriptor<Measurements> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &Measurements_msg;
    }
};
template <>
struct MessageDescriptor<LogMessage> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &LogMessage_msg;
    }
};
template <>
struct MessageDescriptor<Config> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static inline const pb_msgdesc_t* fields() {
        return &Config_msg;
    }
};
template <>
struct MessageDescriptor<Config_SensorParameters> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 5;
    static inline const pb_msgdesc_t* fields() {
        return &Config_SensorParameters_msg;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
